(define-library (scm-checker checkers)
  (import (scheme base)
          (only (srfi 1) append-map filter-map any)
          (prefix (scm-checker config) config/)
          (prefix (scm-checker reader) schk-rdr/)
          (prefix (scm-checker utils) utils/)
          (prefix (scm-checker code-warning) w/)
          (prefix (scm-checker check-component import) chk-import/)
          (prefix (scm-checker check-component quasiquote) chk-quasiquote/)
          (prefix (scm-checker check-component if) chk-if/)
          (prefix (scm-checker check-component cond) chk-cond/)
          (prefix (scm-checker check-component let) chk-let/)
          (prefix (scm-checker check-component cons) chk-cons/)
          (prefix (scm-checker check-component arithmetic) chk-arithmetic/)
          (prefix (scm-checker check-component and) chk-and/)
          (prefix (scm-checker check-component lambda) chk-lambda/))
  (export check-code)
  (begin
    (define (handle-list code debug-info)
      (let ((debug-info-list* (schk-rdr/position-children debug-info)))
        (append-map
          check-code
          code
          debug-info-list*)))

    (define (import-library-declaration? expression)
      (eq? (car expression) 'import))

    (define (export-library-declaration? expression)
      (eq? (car expression) 'export))

    (define (begin-library-declaration? expression)
      (eq? (car expression) 'begin))

    (define (filter-with-debug-info pred ls debug-infos)
      (filter-map
        (lambda (v debug-info*) (and (pred v) (cons v debug-info*)))
        ls
        debug-infos))

    (define (handle-r7rs-library code debug-info)
      (let* ((debug-infos (cddr (schk-rdr/position-children debug-info)))
             (declarations (cddr code))
             (imports (filter-with-debug-info
                        import-library-declaration?
                        declarations
                        debug-infos))
             (begins (filter-with-debug-info
                       begin-library-declaration?
                       declarations
                       debug-infos))
             (used-identifiers (utils/get-identifiers (map car begins))))
        (append
          (if (>= (length imports) 2)
            (list (w/make-code-warning (cdr (cadr imports)) "Duplicate import."))
            '())
          (if (>= (length imports) 1)
            (append-map (lambda (x debug-info)
               (chk-import/simple-library-check x debug-info used-identifiers))
               (cdr (car (car imports)))
               (cdr (schk-rdr/position-children  (cdr (car imports)))))
            '())
          (parameterize (((config/get-dynamic-config 'srfi-1)
                          (and (not (null?  imports))
                               (or (any (lambda (import-set) (chk-import/used-library-namd? import-set '(srfi 1)))
                                        (cdr (caar imports)))
                                   (config/get-config 'srfi-1)))))
            (append-map check-code (map car begins) (map cdr begins))))))

    (define (%check-list-code code debug-info)
      (case (car code)
        ((import) (chk-import/check-import code debug-info) )
        ((cond)
         (append (chk-cond/check-cond code debug-info)
                 (handle-list code debug-info)))
        ((lambda)
         (append (chk-cons/check-cons-in-the-lambda code debug-info)
                 (chk-lambda/check-lambda code debug-info)
                 (handle-list code debug-info)))
        ((let)
         (append (chk-let/check-let code debug-info)
                 (handle-list code debug-info)))
        ((let*)
         (append (chk-let/check-let* code debug-info)
                 (handle-list code debug-info)))
        ((define-library) (handle-r7rs-library code debug-info))
        ((=)
         (append (chk-arithmetic/check-= code debug-info)
                 (handle-list code debug-info)))
        ((zero?)
         (chk-arithmetic/check-zero? code debug-info))
        ((>)
         (append (chk-arithmetic/check-> code debug-info)
                 (handle-list code debug-info)))
        ((<)
         (append (chk-arithmetic/check-< code debug-info)
                 (handle-list code debug-info)))
        ((cons)
         (append (chk-cons/check-cons code debug-info)
                 (handle-list code debug-info)))
        ((if)
         (append (chk-if/check-if code debug-info)
                 (handle-list code debug-info)))
        ((and)
          (append (chk-and/check-and code debug-info)
                  (handle-list code debug-info)))
        ((quote) '())
        ((quasiquote) (chk-quasiquote/check-quasiquote code debug-info))
        (else (handle-list code debug-info))))

    (define (check-code code debug-info)
      (if (or (not (list? code))
              (null? code))
        '()
        (%check-list-code code debug-info)))))

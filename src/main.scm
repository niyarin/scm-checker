(cond-expand
  (chicken
   (include "scm-checker/adapter/set.scm")
   (include "scm-checker/adapter/box.scm")
   (include "scm-checker/utils.scm")
   (include "scheme-reader/scheme-reader/core.scm")
   (include "scm-checker/config.scm")
   (include "scm-checker/reader.scm")
   (include "scm-checker/match/core.scm")
   (include "scm-checker/code-warning.scm")
   (include "scm-checker/check-component/quasiquote.scm")
   (include "scm-checker/check-component/pair.scm")
   (include "scm-checker/check-component/import.scm")
   (include "scm-checker/check-component/if.scm")
   (include "scm-checker/check-component/cond.scm")
   (include "scm-checker/check-component/and.scm")
   (include "scm-checker/check-component/let.scm")
   (include "scm-checker/check-component/cons.scm")
   (include "scm-checker/check-component/arithmetic.scm")
   (include "scm-checker/check-component/lambda.scm")
   (include "scm-checker/checkers.scm"))
  (else))

(import (scheme base)
        (scheme write)
        (scheme file)
        (prefix (scm-checker config) config/)
        (prefix (scm-checker code-warning) w/)
        (only (srfi 1) append-map)
        (prefix (scm-checker reader) schk-rdr/)
        (prefix (scm-checker checkers) checkers/)
        (scheme process-context))

(define (check-file filename)
  (let-values (((code debug-info) (schk-rdr/read-super filename)))
    (append-map
      checkers/check-code
      code
      debug-info)))

(define (check-stdin output-format)
  (let loop ((position (schk-rdr/initial-position "-")))
    (let ((constructed-list (schk-rdr/read-list1 (current-input-port) position)))
      (unless (null? (car constructed-list))
        (for-each
          (lambda (v) (print-warn v output-format))
          (checkers/check-code
            (caar constructed-list)
            (car (schk-rdr/position-children (list-ref constructed-list 2)))))
        (loop (cadr constructed-list))))))

(define (print-warn warn output-format)
  (let ((pos-pair (schk-rdr/position->pair (w/code-warning->pos warn)))
        (filename (schk-rdr/position->filename (w/code-warning->pos warn))))
    (display filename)
    (display ":")
    (display (car pos-pair))
    (display ":")
    (display (cdr pos-pair))
    (display ":")
    (display "W")
    (display ":")
    (display (w/code-warning->message warn))
    (newline)
    (when (and (w/code-warning->suggestion warn)
               (eq? output-format 'LONG))
      (write (w/code-warning->code warn))
      (display " =>")
      (newline)

      (for-each write (w/code-warning->suggestion warn))
      (newline))))

(define (simple-optparse args)
  (let loop ((args* (cdr args))
             (filename "-")
             (output-format 'SHORT))
    (cond
      ((null? args*) (values filename output-format))
      ((string=? (car args*) "--help") (values filename 'HELP))
      ((string=? (car args*) "--short-output")
       (loop (cdr args*) filename 'SHORT))
      ((string=? (car args*) "--long-output")
       (loop (cdr args*) filename 'LONG))
      (else (loop (cdr args*) (car args*) output-format)))))

(define (print-help)
  (display "Usage: Scm-checker <file>")(newline)
  (display "If <file> is '-', This software reads from standard input.")(newline)
  (display "Options:")(newline)
  (display "--short-output: Output simple comment.")(newline)
  (display "--long-output: Output comment and suggestion.")(newline))

(define (%main)
  (let ((args (command-line)))
    (if (null? (cdr args))
      (print-help)
      (let-values (((filename output-format) (simple-optparse args)))
        (cond
          ((eq? output-format 'HELP) (print-help))
          ((string=? filename "-") (check-stdin output-format))
          (else (for-each (lambda (warn) (print-warn warn output-format))
                          (check-file filename))))))))
(%main)

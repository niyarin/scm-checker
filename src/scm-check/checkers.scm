(define-library (scm-check checkers)
  (import (scheme base)
          (only (srfi 1) append-map)
          (prefix (scm-check reader) schk-rdr/)
          (prefix (scm-check check-component import) chk-import/)
          (prefix (scm-check check-component if) chk-if/)
          (prefix (scm-check check-component cond) chk-cond/)
          (prefix (scm-check check-component and) chk-and/))
  (export check-code)
  (begin
    (define (handle-list code debug-info)
      (let ((debug-info-list* (schk-rdr/position-children debug-info)))
        (append-map
          (lambda (code* debug-info*) (check-code code* debug-info*))
          code
          debug-info-list*)))

    (define (check-code code debug-info)
      (cond
        ((not (list? code)) '())
        ((null? code) '())
        ((eq? (car code) 'import)
         (chk-import/check-import code debug-info) )
        ((eq? (car code) 'cond)
         (append (chk-cond/check-cond code debug-info)
                 (handle-list code debug-info)))
        ((eq? (car code) 'if)
         (append (chk-if/check-if code debug-info)
                 (handle-list code debug-info)))
        ((eq? (car code) 'and)
          (append (chk-and/check-and code debug-info)
                  (handle-list code debug-info)))
        ((eq? (car code) 'quote)
          '())
        ((list? code)
         (handle-list code debug-info))
        (else '())))))
